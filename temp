class Report(Command):
    def __init__(self):
        super().__init__(
            command_keyword="report",
            help_message="getting bin report"
        )
    
    def execute(self, message, attachment_actions):

        sevList, collab_cases_sevList, fts_cases_sevList, asean_count, us_count, qm = [],[],[],0,0, ''

        if message == None :
            sevList, collab_cases_sevList, fts_cases_sevList, asean_count, us_count, qm = m_obj.get_report()
        else : 
            date = message.lstrip().split(" ")[0]
            sevList, collab_cases_sevList, fts_cases_sevList, asean_count, us_count, qm = m_obj.get_report(date)

        collab_msg = f"P1: {collab_cases_sevList[0]}, P2: {collab_cases_sevList[1]}, P3: {collab_cases_sevList[2]}, P4: {collab_cases_sevList[3]}"
        fts_msg = f"P1: {fts_cases_sevList[0]}, P2: {fts_cases_sevList[1]}, P3: {fts_cases_sevList[2]}, P4: {fts_cases_sevList[3]}"
        normal_msg = f"P1: {sevList[0]}, P2: {sevList[1]}, P3: {sevList[2]}, P4: {sevList[3]}"
        msg = quote_info(f"Total :\n\n{normal_msg}\n\n\nCollab :\n\n{collab_msg}\n\n\nFTS :\n\n{fts_msg}\n\n\nTotal Asean Cases : {asean_count}\n\n\nTotal US Cases : {us_count}\n\n\nTotal Cases: {sum(sevList)+sum(collab_cases_sevList)+sum(fts_cases_sevList)}\n\n\n\nQueue Manager: {qm}")
        response = Response()
        response.markdown = msg

        return response





/////////// setAvailabilityCallback

                    
                    case '12':
                        #QM
                        r_obj.set_idx_eng_weight(idx, queue_name, math.inf)
                        m_obj.add_qm(cecid)



/////////// helper.py

def is_eng_available(eng_idx: int, queue_name: str):

    """ 
        This function is used to check if the given engineer is available
        to pick cases i.e the engineer is not on HD, Off_Queue or DND
    """

    cec_id = r_obj.get_idx_eng(queue_name, eng_idx)

    eng_availability_state = r_obj.get_idx_eng_availability(eng_idx, queue_name)

    if(eng_availability_state != '0'):
        
        match eng_availability_state:
            
            case '2' | '12':
                
                ## Full-Day DND/Off-Queue
                return False





//////////////////////////////////////////////



                case '12':
                    cec_p += '(QM, '


            s_calls = r_obj.get_all_scheduled_calls(cec)
            if len(s_calls) > 0 :
                if eng_available_state not in ['3', '4', '5', '6', '8', '9', '10', '11', '12'] :
                    cec_p = cec_p + '('
                for sc in s_calls :
                    cec_p += str(sc) + ', '
                cec_p = cec_p[:-2]
                cec_p += ')'
            elif eng_available_state in ['3', '4', '5', '6', '8', '9', '10', '11', '12'] :
                cec_p = cec_p[:-2]
                cec_p += ')'





//////////////////    mongodb.py


class mongo_DB() :
    def __init__(self):
        self.mongoClient = pymongo.MongoClient('mongodb://localhost:27017/')
        self.db = self.mongoClient["cases"]
        self.case_logs_coll = self.db.get_collection('case_logs')
        self.borg_ping_coll = self.db.get_collection('borg_ping')
        self.qm_coll = self.db.get_collection('qm')
    
    def add_qm(self, cecid) :
        now = datetime.datetime.now()
        qm = {
            'date': str(now.date()),
            'cecid': cecid
        }
        self.qm_coll.insert_one(qm)



////


            qm = ''
            qms = list(self.qm_coll.find({'date': date}))
            for eqm in qms :
                q = eqm['cecid']
                qm += f' {q}'

            return [nomral_p1, nomral_p2, nomral_p3, nomral_p4], [collab_p1, collab_p2, collab_p3, collab_p4], [fts_p1, fts_p2, fts_p3, fts_p4], total_asean, total_us, qm






if (cecid in eng_dict.keys()) :
                queue_name = eng_dict[cecid].get("queue_name")
                idx = eng_dict[cecid].get('idx')
                r_obj.update_eng_availability(queue_name, idx, availability_number)

                match availability_number:

                    case '2':
                        #Fullday DND/Off-Q
                        r_obj.set_idx_eng_weight(idx, queue_name, math.inf)
                    
                    case '5':
                        #FH-DND/Off-Q
                        current_time = Date.now()
                        end_time = Date.now().replace(hour = 15, minute = 0, second = 0, microsecond = 0)

                        duration = int((end_time-current_time).total_seconds())
                        r_obj.db.execute_command(f"SET {cecid}_FHDND True EX {duration}")
                        r_obj.set_idx_eng_weight(idx, queue_name, math.inf)

                    
                    case '8'|'10':
                        #FH-HD/FH-ESC
                        current_time = Date.now()
                        end_time = Date.now().replace(hour = 15, minute = 0, second = 0, microsecond = 0)

                        duration = int((end_time-current_time).total_seconds())
                        r_obj.db.execute_command(f"SET {cecid}_FHOFF True EX {duration}")
                        r_obj.set_idx_eng_weight(idx, queue_name, math.inf)
                    case '12':
                        #QM
                        r_obj.set_idx_eng_weight(idx, queue_name, math.inf)
                        m_obj.add_qm(cecid)
    
            response.markdown = quote_info(f'Availability changed successfully')

